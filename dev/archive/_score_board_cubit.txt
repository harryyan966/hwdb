w  Future<void> calculateFinalScore() async {
    if (state.status.isLoading) return;
    emit(state.copyWith(status: PageStatus.loading));

    // REQUEST THE SERVER TO GENERATE A FINAL SCORE
    final res = await _httpClient.patch('/courses/${courseInfo.id}/scores/final');

    // IF THE SERVER RETURNED A FINAL SCORE
    if (Events.calculatedFinalScore.matches(res['event'])) {
      final finalScores = toScores(res['data']);

      emit(state.copyWith(
        status: PageStatus.good,
        finalScores: finalScores,
      ));
    }

    // THROW ANY UNEXPECTED RESPONSE
    else {
      emit(state.copyWith(status: PageStatus.bad));
      throw Exception(res.pretty());
    }
  }


  // DIRECTLY UPDATE LOCAL DATA
      // final finalScores =
      //     ScoreTools.computeFinalScores(state.assignments.map((e) => e.toJson()).toList(), state.scores);








// await FileSaver.instance.saveFile(name: fileName, bytes: fileBytes);
  // return true;